((function(){
	var isRegExp =  require("util").isRegExp;
	var isArray =  require("util").isRegExp;
	var fs = require("fs");
	var utils =require("qpt-utils");
	var tobool = utils.tobool;
	var fail = utils.fail;
	var u = require("underscore");
    var commonlibpart = function(options,_private) {
        _private.options = options;
        _private.getall = function ( infos , filter ) {
            var self = this;
            if (!isArray (infos)) {
                infos = this.findInfo(infos);
            }
            if (!!filter ){
                return u.filter(u.map( infos , function (i) {return self.get(i);}), filter);
            }
            return u.map( infos , function (i) {return self.get(i);});
        };
        _private.new = function ( query ) {
            return u.extend({},this.get(query));
        };
        _private.getInfo = function ( query ){
            query  = this.prepareQuery(query);
            var self = this;
            return u.find( this.getIndex(), function(i){
                return self.isMatchInfo(i,query);
            });
        };
        _private.findInfo = function ( query ){
            query  = this.prepareQuery(query);
            var self = this;
            return u.filter( this.getIndex(), function(i){
                return self.isMatchInfo(i,query);
            });
        };

        _private.newall = function ( query ,filter ) {
            return u.map (this.getall(query,filter),function(c){ u.extend({},c);});
        };
        _private.isMatchInfo = function ( info, query ) {
            if ( null == query ) return true;
            if ( !!query.proto ) {
                if (!tobool(info.proto))return false;
                if (isRegExp(query.proto)){
                    if (! info.proto.match(query.proto) )return false;
                }else{
                    if ( query.proto!=info.proto ) return false;
                }
            }
            if ( !!query.code ) {
                if (!tobool(info.code))return false;
                if (isRegExp(query.code)){
                    if (! info.code.match(query.code) )return false;
                }else{
                    if ( query.code!=info.code ) return false;
                }
            }
            if ( !!query.fullcode ) {
                if (!tobool(info.fullcode))return false;
                if (isRegExp(query.fullcode)){
                    if (! info.fullcode.match(query.fullcode) )return false;
                }else{
                    if ( query.fullcode!=info.fullcode ) return false;
                }
            }
            if ( !!query.namespace ) {
                if (!tobool(info.namespace))return false;
                if (isRegExp(query.namespace)){
                    if (! info.namespace.match(query.namespace) )return false;
                }else{
                    if ( query.namespace!=info.namespace ) return false;
                }
            }
            return true;
        };
        _private.prepareQuery = function(query){
            if(null==query)return null;
            if (typeof query == "string") {
                if(!!query.match(/^p:/)){
                    query = { proto : query.substring(2) };
                }else if (!!query.match(/^ns:/)){
                    query = { namespace : query.substring(3) };
                }else if (!!query.match(/^c:/)) {
                    query = { code : query.substring(2) };
                }else if (!!query.match(/^fc:/)){
                    query = { fullcode : query.substring(3) };
                }else{
                    if( query.match(/\./) ){
                        query = { fullcode : query };
                    }else{
                        query = { code : query };
                    }
                }
            }else if (isRegExp(query)){
                query = { fullcode : query };
            }
            return query;
        };
        var result = {
            options : options,
            get  : function(q){return _private.get(q);},
            getall : function(q,filter){return _private.getall(q,filter);},
            new : function(q){return _private.new(q);},
            newall  : function(q,filter){return _private.newall(q,filter);},
            getInfo : function(query){
                query = _private.prepareQuery(query);
                if (null == query ) return _private.getIndex()[0];
                if (!!query.fullcode && typeof query.fullcode == "string" ){
                    if (!(query.code || query.namespace || query.proto )){
                        return _private.getIndex()[query.fullcode];
                    }
                }
                return 	_private.getInfo(query);
            },
            findInfo : function(query){
                query = _private.prepareQuery(query);
                if (null == query ) return _private.getIndex();
                return 	_private.findInfo(query);
            },
            querify : function(){
                return u.reduce(
                    arguments,
                    function(q, arg){
                        if(arg && typeof arg != "function"){
                            u.extend(q, _private.prepareQuery(arg));
                        }
                        return q;
                    },{}
                );
            }
        };
        if (!!options.withprivate){
            result._private = _private;
        }
        return result;
    }



	function _dataLoaded(data, callback, options ){
		var result = _readLibrary(data, options);
		callback (null, result);
	}
	
	function _readLibrary ( data, options ) {
        var _private = {};
        if(options.libformat=="bslib"){
            var files =  require("node-zip")( data,{ base64:true} ).files;
            return u.extend(
                commonlibpart(options,_private),
                new _zipBSharpWrapper( files , options,_private )
            );
        }else{
            var obj =  JSON.parse(data);
            return u.extend(
                commonlibpart(options,_private),
                new _jsonWrapper( obj , options,_private )
            );
        }
	}

    function _jsonWrapper (obj, options, _private){
        _private.obj = obj;
        u.each(obj,function(cls){cls.proto=cls["prototype"];delete cls["prototype"];});
        _private._clsidx = u.indexBy(obj,"fullcode");
        var heads = u.map(
            obj, function(cls){
                var copy = {};
                u.each(cls,function(v,n){
                   if(typeof v!="object"){
                       copy[n] =v;
                   }
                });
                return copy;
            }
        );
        _private._headidx = u.indexBy(heads,"fullcode");
        _private.getIndex = function(){
            return _private._headidx;
        };
        _private.get = function ( query ) {
            if (!query.uri) query = this.getInfo(query);
            return _private._clsidx[query.fullcode];
        };
    }
	
	function _zipBSharpWrapper ( zipfiles, options, _private ) {

		_private.files = zipfiles;
		_private.load = function( uri, options ){
			var xml = zipfiles[uri].data.substring(3);
			var js = utils.xmlToJson(xml, options || {idattr : "fullcode" , processids:true });
			return js;
		};
		_private.getIndex = function(){
			if( !tobool(_private.index)) {
				this.index = this.load("index").bsharpIndex["class"] || [];
				if (0 == this.index.length) {
					this.index.push({ code  : "stub" });
				}
				u.each ( this.index , function(i){
					if(!!i["prototype"]){
						i.proto = i["prototype"];
						delete i["prototype"];
					}
					if (!!i["uri"]){
						i.uri = i.uri.substring(1);
					}
				});
				
			}
			return _private.index;
		};
		_private.get = function ( query ) {
			if (!query.uri) query = this.getInfo(query);
			if (!this.cache) this.cache = {};
			if (!this.cache[query.uri]){
				var cls = this.load(query.uri,{});
				if (null!=cls) {
					cls = cls["class"]["Compiled"][0];
				}
				this.cache[query.uri] = cls;
			}
			return this.cache[query.uri];
		};



	};
	
	module.exports = function(options, callback){
		if (typeof options == "string") {
			options = { lib : options };
		}
		if (typeof options == "function"){
			callback = options;
			options = null;
		}
		options = options || (require("optimist").argv);
		if (!options.lib){
			options.lib = require("optimist").argv.lib;
		}
		lib = options.lib;
		async = typeof callback == "function";
		
		try{
			if ( tobool(callback) && typeof callback != "function") return fail ( new Error("callback must be function"), callback);
			if ( !tobool(lib) ) return fail ( new Error("lib param not supplied") ,callback);
			if ( !fs.existsSync ( lib )) return fail ( new Error("lib '"+lib+"' not exists"),callback);
            options.libformat = "bslib";
            options.readformat="base64" ;
            if (lib.match(/\.json$/)){
                options.libformat="json";
                options.readformat="utf8";
            }
            if(options.libfile){
                var result  = _readLibrary( options.libfile.read(),options);
                if(async){
                    callback(null,result);
                }else{
                    return _result;
                }
            }else{
                if (async){
                    fs.readFile (  lib, options.readformat, utils.getAsyncHandler(_dataLoaded, callback, options) );
                }else{
                    var data = fs.readFileSync ( lib , options.readformat) ;
                    return _readLibrary(data, options);
                }
            }
		}catch(e){
			fail(e,callback);
		}
	}
	
})())