/**
 * Created by comdiv on 13.12.13.
 */
var url = require('url');
var u = require("underscore");
var isArray = require("util").isArray;
var basehandlers = {
    "/heartbit" : {state:200,type:"text/plain",content:"ok"},
    "/reload" : function(context,req,res){
        context.host.reload("http call",function(err,r){
            if(err){
                res.writeHead(500,{"Content-Type":"text/plain"});
                res.end("error:"+err);
            }else{
                res.writeHead(200,{"Content-Type":"text/plain"});
                res.end("ok");
            }
        });

    }
};
var timestamp = require("qpt-utils").timestamp;
var findbasis = function(context, path ){
    var pathparts = path.split("/");
    var basis = context;
    var parent = null;
    var subpath= [];
    var map = [];
    var filter =[];
    var asxml = false;
    var _m = null;
    u.each(pathparts,function(p){
        if(null==basis)return;
        if(!p)return;
        if(typeof basis =="function"){
            if(p=="~xml"){
                asxml =true;
            }else if(p=="~json"){
                asxml =false;
            }else if(_m = p.match(/(\[|(%5B))(.+)(\]|(%5D))/)){
                var filters = _m[3].split(",");
                filter  = u.union(filter,filters);
            }
            else if(p.match(/!.+/)){
                var maps = p.substring(1).split(",");
                map  = u.union(map,maps);
            }
            else{
                subpath.push(p);
            }
        }else{
            parent = basis;
            basis = basis[p];
        }
    });
    return {call:basis,self:parent,subquery:subpath,asxml:asxml,map:map,filter:filter};
};
var authorized = function (descriptor){
    if(null==descriptor)return false;
    return descriptor.allow;
};
var x2j = require("xml2js");
var b = new x2j.Builder();
var format = function(obj , format){
    if(!format)return JSON.stringify(obj);
    if(null==obj){
        return "<null/>";
    }
    if (typeof obj!="object"){
        obj = {value:obj.toString()};
    }
    return b.buildObject(obj);
}
var prepareResult = function(obj, handler){
    var result = obj;
    subpath = handler.subquery ||[];
    map = handler.map ||[];
    if(null!=result){
        u.each(subpath,function(i){
            if(null==result)return ;
            result = result[i];
        });
        if (null==result)return format("Cannot find subquery" + subpath.join("."),!!handler.asxml);
        if (0!=handler.filter.length){
            result = u.filter(result,function(obj){
                 return u.find(handler.filter,function(f){return !!obj[f]});
            });
        }
        if (0!=handler.map.length){
            var mapper = function(obj){
                var result = {};
                u.each(handler.map,function(m){
                   if(obj[m]){
                     result[m] = obj[m];
                   }
                });
                return result;
            }
            if(isArray(result)){
                result = u.map(result,mapper);
            }else{
                result = mapper(result);
            }
        }
    }
    return format(result,!!handler.asxml);
};
var getdirecthandler = function(handler,descriptor){
    var mode = descriptor.calltype || "native";
    var sendquery = (!!descriptor.sendquery) || false;
    var async = (!!descriptor.async) || false;

    if (mode=="native"){
        return function(context,req,res){
            handler.call(req,res,handler);
        }
    }else{
        return function(context,req,res){
            var arguments = [];
            var ctype = !!handler.asxml ? "text/xml" : "application/json";
            if(sendquery){
                var q = url.parse(req.url,true).query;
                arguments.push(q);
            }
            if(async){
                var callback = function(err,result){
                    if(err){
                        res.writeHead(500,{"Content-Type":"text/plain"});
                        res.end("error:"+err);
                    }else{
                        result = prepareResult(result,handler);
                        if(!!descriptor.cachecontent){
                            var ts = timestamp();
                            res.setHeader("ETag",ts);
                            context.__web_handler_cache[req.url]={status:200,ctype:ctype,content:result,etag:ts};
                        }
                        res.writeHead(200,{"Content-Type":ctype});
                        res.end(result);
                    }
                }
                arguments.push(callback);
            }
            if(async){
                handler.call.apply(handler.self,arguments);
            }else{
                try{
                    var result = prepareResult(handler.call.apply(handler.self,arguments),handler);

                    if(!!descriptor.cachecontent){
                        var ts = timestamp();
                        res.setHeader("ETag",ts);
                        context.__web_handler_cache[req.url]={state:200,ctype:ctype,content:result,etag:ts };
                    }
                    res.writeHead(200,{"Content-Type":ctype});
                    res.end(result);
                }catch(err){
                    res.writeHead(500,{"Content-Type":"text/plain"});
                    res.end("error:"+err);
                }
            }
        }
    }
}
var notauth =  {state:404,ctype:"text/plain",content:"not published from api"};

var gethandler =function(context, req){
    var parsedurl = url.parse(req.url, true);
    var pathname = parsedurl.pathname;
    if(basehandlers[pathname]){
        return basehandlers[pathname];
    }
    var direct = findbasis(context,pathname);

    if (null == direct.call) return null;

    var httpdescriptor = direct.call._http_export;

    if(authorized(httpdescriptor)){
        return getdirecthandler(direct,httpdescriptor);
    }else{
        return notauth;
    }
};
module.exports = {
    route : function ( context, req , res) {
        if(!context.__web_handler_cache){
            context.__web_handler_cache = {};
        }
        if(context.__web_handler_cache[req.url]){
           var  result = context.__web_handler_cache[req.url];
            if(null!=result){
                if(!result.reuse)result.reuse=0;
                result.reuse++;
                return result;
            }
        }
        var result = context.__web_handler_cache[req.url] = gethandler(context,req);
        if(result){
            result.reuse = 0;
        }
        return result;
    }
}