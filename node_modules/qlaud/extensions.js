/**
 * Created by comdiv on 13.12.13.
 */
var ut = require("util")
var u = require("underscore");
var panalizelist = function(obj,name){
            var current = obj[name];
            obj[name]= [];
            if (!ut.isArray(current)){
                u.each(current,function(v){
                    if(typeof v=="object"){
                        obj[name].push(v);
                    }
                })
                return;
            }


            u.each (current , function (list) {
                u.each (list, function(item,code){
                    if (typeof item == "object" ){
                        if(typeof item[0] == "object"){
                            item[0].code = code;
                            obj[name].push(item[0]);
                        }
                    }

                });
            });
        };
            var getfilter = function (query) {
                if (null == query ) return null;
                return function ( c ) {
                    if (!!query.group){
                        if (null == c.group) return false;
                        if ( 0 == u.intersection(c.group.split(" "), query.group.split(" ")).length){
                            return false;
                        }
                    }
                    if (!!query.type){
                        if(null== c.type)return false;
                        if(query.type!= c.type)return false;
                    }
                    return true;
                };
            };
module.exports = {
    setup : function(library){
        var self = this;
        u.each(self.extendlib,function(extension){
            var e = u.extend({},extension);
            u.each(e,function(i,n){
                if(typeof i=="object"){
                    i = u.extend({},i);
                    i.self = library;
                    e[n] = i;
                }
            });
            u.extend(library,e);
        });
        u.each(library.nodes(), function(node){
            u.each(self.extendnode,function(extension){
                var e = u.extend({},extension);
                u.each(e,function(i,n){
                    if(typeof i=="object"){
                        i = u.extend({},i);
                        i.self = node;
                        e[n] = i;
                    }
                });
                u.extend(node,e);
            }) ;
            u.each(self.setupnode, function(setuper){
                setuper(node);
            });
        });
        u.each(self.setuplib, function(setuper){
            setuper(library);
        });
        return library;
    },
    extendlib : {
        core : {
            _cache : {},
            clearCache : function(){this._cache = {};},
            ver : function(){
                var info = this.get({code:"__module"});
                return {t:info.timestamp,h:info.hash};
            },
            src : function(){
               return this.options.libfile.readobj();
            },
            nodes : function(query){
                query = this.querify(query,{proto:"node"});
                return this.getall( query,getfilter(query));
            },
            services : function(query){
                query = query||{};
                var nodesquery = null;
                var servicesquery = query;
                if(!!query.nodes){
                    nodesquery = query.nodes;
                }
                if(!!query.services){
                    servicesquery = query.services
                }
                var nodefilter = getfilter(nodesquery);
                var servfilter = getfilter(servicesquery) || function(){return true;};
                return u.reduce(
                    this.nodes(nodesquery,nodefilter),
                    function(result, node ){
                        var services= u.map(
                            u.filter(node.services,servfilter),
                            function(s){
                                return u.extend({},s, {node: node.getheader()})
                            }
                        );
                        return u.union(result,services);
                    },[]
                );
            }

        },
        mongo : require("./extensions/mongo"),
        ping : require("./extensions/ping")
    },
    extendnode : {
       core : {
           getheader : function(){
               var result = {};
               u.each(this,function(v,n){
                   if(typeof v == "object" || typeof  v=="function"){
                       return;
                   }
                   result[n] =v;
               });
               return result;
           }
       }


    },
    setuplib : {
        httpexport : function(library){

            library.nodes._http_export = {allow: true, calltype: "wrap", sendquery: true,cachecontent:false};
            library.ver._http_export = {allow: true, calltype: "wrap", sendquery: false,cachecontent:true};
            library.src._http_export = {allow: true, calltype: "wrap", cachecontent:true};

            library.mongodb.get._http_export = {allow: true, calltype: "wrap", sendquery: true, cachecontent:true};

            library.ping.start._http_export = {allow: true, calltype: "wrap", async:true, sendquery: true,cachecontent:false};
            library.ping.getActiveQlauds._http_export = {allow: true, calltype: "wrap", async:true, sendquery: true,cachecontent:false};
            library.ping.getvers._http_export = {allow: true, calltype: "wrap", async:true, sendquery: true,cachecontent:false};

        }
    },
    setupnode : {
        planalizeservices : function(node){
            panalizelist(node,"services");

        },
        planalizeresources : function(node){
            panalizelist(node,"resources");

        }

    }
}