/**
 * Created by comdiv on 13.12.13.
 */
var isArray =  require("util").isArray;
var u = require("underscore");
module.exports =
{
    mongodb :{
        get : function(options){
            if(!this.self._cache.getMongoConnections){
                var prefix = "mongodb://";
                var replsuffix = "?connect=replicaset;readpreference=primaryPreferred";
                var formatconnectionstring = function(servs,replica){
                    var hosts = "";
                    if(isArray(servs)){
                        hosts =  (u.map(servs,function(s){return s.host+":"+ s.port })).join(",");
                    }else{
                        hosts = servs.host+":"+ servs.port
                    }
                    return [prefix,hosts, replica?replsuffix:"" ].join("");
                };
                var result = {};
                result.default = null;
                var raw = u.reduce(
                    this.self.services({type:"mongodb"}),
                    function(result,service){
                        var replicaset = service.replicaset || "_standalone";
                        result[replicaset] = result[replicaset]||[];
                        mongodesc = {
                            host:service.node.localAddress,
                            port:service.mongoport,
                            node:service.node.code,
                            isdefault:!!service.isdefaultMongodb
                        };
                        if(mongodesc.isdefault){
                            result[replicaset].isdefault =true;
                        }
                        result[replicaset].push(mongodesc)
                        return result;
                    },{}
                );

                var idx = 0;
                u.each(raw,function(m,n){
                    if(isArray(m)){
                        if(n=="_standalone"){
                            result._standalone = {};
                            u.each(u.map,function(s){s.connectionString=formatconnectionstring(s);})
                            result._standalone = u.map;
                        }else{
                            result[n] = {};
                            result[n].connectionString = formatconnectionstring(m,n);
                            result[n].servers = m;
                            if(!!m.isdefault){
                                result.default = result[n];
                            }
                        }
                    }
                });

                this.self._cache.getMongoConnections = result;
            }
            return this.self._cache.getMongoConnections;
        }
    }

};
