/**
 * Created by comdiv on 13.12.13.
 */
var isArray =  require("util").isArray;
var u = require("underscore");
var p =require("net-ping");
var h = require("http");
module.exports =
{

    ping :{
        _idgen : 1,
        //task pool
        _tasks : {length:0},
        //max size of emmidiate ping tasks
        _maxtasks : 10,
        _process : function(task){
            var tasks = this._tasks;
            var self = this.self;
            var host =this;
            var nodes = task.nodes = u.map(self.nodes(task.query),function(n){return {code: n.code, ip: n.localAddress}});
            task.pending=nodes.length * 2;
            task.session = p.createSession();

            task.timeout = setTimeout(function(){
                task.finished = true;
                task.timeouted=true;
                u.each(task.nodes,function(n){
                   if(n.pending!=0){
                       n.timeouted =true;
                   }
                });
                task.session.close();
                task.req.abort();
                delete  host._tasks[task.id];
                host._tasks.length--;
                task.callback(null,task.nodes);
            },task.timeout);
            u.each(nodes,function(n){
                n.start = new Date();
                n.time = 0;
                n.pending = 2;
                task.session.pingHost(n.ip,function(e,r){
                    if(e){
                        n.allow = false;
                        n.pingError= e;
                    }else{
                        n.allow=true;
                    }
                    n.time = new Date() - n.start;
                    n.pending --;
                    host._checkfinish(task);
                });
                task.req = h.get("http://"+ n.ip+":"+self.options.httpport+"/heartbit", function(r){
                    n.qlaud =true;
                    n.time = new Date() - n.start;
                    n.pending --;
                    host._checkfinish(task);
                }).on("error",function(e){
                        n.qlaud =false;
                        n.time = new Date() - n.start;
                        n.pending --;
                        host._checkfinish(task);
                    });
            });
        },

        _checkfinish : function(task){
            if(!!task.finished){
                return;
            }
            task.pending--;
            if(task.pending==0){
                clearTimeout(task.timeout);
                delete this._tasks[task.id];
                this._tasks.length--;
                task.session.close();
                task.req.abort();
                task.callback(null,task.nodes);

            }
        },
        //async-http designed ping proces starter
        start : function(query,callback){
            callback =callback || function(e,r){console.log(e||r);};
            query = query || {};
            var process = u.bind(this._process,this);
            var tasks = this._tasks;
            var max = this._maxtasks;
            if(tasks.length==max){
                callback(new Error("max ping limit riched"),null);
            }else{
                var id = this._idgen++;
                tasks.length++;
                var task = tasks[id] = {id:id, query:query, callback:callback,timeout:(query.timeout||3000)};
                setImmediate(function(){process(task)});
            }
        },

        getActiveQlauds : function(q,callback){
            q =u.defaults(q||{},{timeout:500})
              this.start(q,function(e,r){
                  if(e){
                      callback(e,null);
                      return;
                  }
                   var qds = u.filter(r,function(n){return !!n.qlaud});
                  callback(null,qds);
              })  ;
        },

        getvers : function(q,callback){

            q =u.defaults(q||{},{timeout:500})
            this.getActiveQlauds(q,function(e,r){
                if(!!e && !!callback){
                    callback(e,null);
                }
                var task = r;
                task._pending = task.length;

                task._oneComplete = function(){
                    this._pending--;
                    if(this._pending==0){
                        if(!!callback){
                            callback(null,task);
                        }
                    }
                }
                u.each(r,function(n){
                    var url = "http://"+ n.ip+":8087/ver";
                    var mynode = n;
                    h.get(url,function(response){
                       response.on("data",function(chunk){
                           mynode.ver = JSON.parse(chunk.toString());
                           task._oneComplete();
                       }) ;
                    }).on("error", function(e){
                            mynode.ver = {error:e};
                            task._oneComplete();
                        });
                });

            })
        }
    }

};
