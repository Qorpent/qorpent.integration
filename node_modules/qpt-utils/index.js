((function(){
	var utils = require("util");
	var parsejs = require("xml2js").parseString;
	var tobool = function( obj ) {
			if (null==obj) return false;
			if (typeof obj == "boolean") return obj;
			if (typeof obj == "string" ){
				if(obj.trim().length == 0 ) return false;
				return true;
			}
			if (typeof obj == "number" ) {
				if ( 0 == obj ) return false;
				return true;
			}
			if ( utils.isArray( obj )) {
				if ( 0 == obj.length ) return false;
				return true;
			}
			if ( utils.isDate( obj ) ) {
				if ( 1900 >= obj.getFullYear() ) return false;
				return true;
			}
			return true;
		};
	var fail = function(e,callback) {
			if (typeof callback == "function"){
					callback( e, null);
					return -1;
				}else{
					throw e;
			}
			return -1;
		};
	var getAsyncHandler  = function ( func, callback ) {
		var args = Array.prototype.slice.call(arguments).slice(2);
		return (
			function(error, result ) {
				if( tobool (error ) ){
					return fail ( error, callback );
				}else {
					var callargs = [ result , callback ];
					for (var i =0 ;i<args.length;i++){
						callargs.push(args[i]);
					}
					try {
						func.apply (null, callargs );
					}catch(e){
						fail(e,callback);
					}
				}
			}
		);
	};
	
	var camel = function (str){
		if(!tobool(str))fail(new Error("cannot camelize empty"));
		return str.replace(/-(\w)/g,function(m){return m[1].toUpperCase();});
	};
	var _tokey = function (str ) {
		if (!(isNaN(str)))return "k"+str;
		return str;
	}
	var _expandToJson = function ( obj , options) {
		options = options || {processids:true};
		var result = {};
		for (var i in obj ) {
			var val = obj[i];
			var name = camel(i);
			if (utils.isArray(val)) {
				//attribute case
				if (val.length == 1 && typeof val[0] != "object" ) {
					result[name] = val[0];
				}else{
					//attribute+child or child case
					var children = [];
					for(var i =0;i<val.length;i++){
						var ch = val[i];
						// case of sub-element
						if(typeof ch == "object") {
							ch = _expandToJson(ch,options);
							// build id/code index
							if(!!options.processids){
								var idattr = options.idattr || "__";
								key = ch[idattr] || ch.id || ch.code;
								if (!!key){
									key = _tokey(key);
								}
								if(!!children[key]){
									if(utils.isArray(children[key])){
										children[key].push(ch);
									}else{
										children[key] =  [children[key], ch];
									}
								}else{
									children[key] =ch;
								}
							}
						}
						children.push(ch);
					}
					result[name] = children;
				}
			}else if (typeof val ==  "object"){
				result[name] = _expandToJson ( val, options );
			}else{
				result[name] = tobool(val)?val:{};
			}
		}
		return result;
	};
	
	var xmlToJson = function ( xml ,options ) {
		var _result = null;
		parsejs(xml, {mergeAttrs:true, explicitArray:true}, function (err, result) {
			if(err)fail(err);
			_result = _expandToJson(result, options);
		});
		return _result;
	};
	var timestamp  = function(d){
        return (d||new Date()).toISOString().replace(/\D/g,'');
    };
    var uuid = function UUID() {
        var nbr, randStr = "";
        do {
            randStr += (nbr = Math.random()).toString(16).substr(2);
        } while (randStr.length < 30);
        return [
            randStr.substr(0, 8), "-",
            randStr.substr(8, 4), "-4",
            randStr.substr(12, 3), "-",
            ((nbr*4|0)+8).toString(16), // [89ab]
            randStr.substr(15, 3), "-",
            randStr.substr(18, 12)
        ].join("");
    }
	module.exports = {
		tobool : tobool,
		fail : fail,
		getAsyncHandler : getAsyncHandler,
		camel : camel,
		xmlToJson : xmlToJson,
        timestamp : timestamp,
        uuid:uuid,
        handleFile : require("./fileHandler")
	}

})())