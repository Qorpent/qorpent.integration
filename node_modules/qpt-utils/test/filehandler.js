/**
 * Created by comdiv on 15.12.13.
 */
var u = require("./../index");
var hf = u.handleFile;
if(null==hf){
    throw "u.handleFile was not found, break testing!!!"
}
var fs = require("fs");

module.exports = {

        setUp : function (callback) {
            this.filename = "./test/"+u.uuid();
            fs.writeFileSync(this.filename,"initial");
            fs.utimesSync(this.filename,new Date(2000,1,1), new Date(2000,1,1));
            this.exh = hf(this.filename);
            this.nexh = hf(this.filename+".noexisted");
            callback();
        },
        tearDown: function (callback) {
            // clean up
            if(fs.existsSync(this.filename)){
                fs.unlinkSync(this.filename);
            }
            if(fs.existsSync(this.filename+".noexisted")){
                fs.unlinkSync(this.filename+".noexisted");
            }
            callback();
        },

        internalTest : function(test){
            test.ok(this.filename,"filename not prepared");
            var exists = fs.existsSync(this.filename);
            test.ok(exists,"file not existed");
            if(exists){
                test.ok(fs.readFileSync(this.filename)=="initial","file has bad content");
            }
            test.done();
        },
        canCheckExistence : function(test){
            var h = this.exh;
            test.ok(h.exists(),"well checked file existence");
            h.exists(function(r){
                test.ok(r,"well checked file existece async");
            });
            h = this.nexh;
            test.ok(!h.exists(),"not existed file shown as existed");
            h.exists(function(r){
                test.ok(!r,"not existed file shown as existed async");
                test.done();
            });

        },
        canReadExisted : function(test){
            var h = this.exh;
            test.equal(h.read(),"initial","well read sync");
            h.read(function(e,r){
                test.equal(r,"initial","well read async");
                test.done();
            });
        },
        canReadExisted : function(test){
            var h = this.exh;
            test.equal(h.read(),"initial","well read sync");
            h.read(function(e,r){
                test.equal(r,"initial","well read async");
                test.done();
            });
        },
        emptyOnNonExisted : function(test){
            var h = this.nexh;
            test.equal(h.read(),"","well read sync");
            h.read(function(e,r){
                test.equal(r,"","well read async");
                test.done();
            });
        },
        notSpamChangeIfNotRead : function(test){
            var h = this.exh;
            var ch = false;
            h.on("change",function(){
                test.ok(false,"don't span on self writes");
                test.done();
            });
            var fn = this.filename;
            fs.writeFile(fn,"test");
            setTimeout(function(){
               test.done();
            },300);
        },
        notifyChangeIfRead : function(test){
            var h = this.exh;
           // h._isdebug=true;
            var ch = false;
            var fn = this.filename;
            h.on("change",function(){
                //console.log("called");
                clearTimeout(timeout);
                test.done();
            });
            var timeout = setTimeout(function(){
                test.ok(false,"not notify of changes on read files");
                test.done();
            },300);
            h.read();
            fs.writeFile(fn,"test");

        },
        notSpamOnSelfWrite : function(test){
            var h = this.exh;
            var ch = false;
            var fn = this.filename;
            h.on("change",function(){
                test.ok(false,"don't span on self writes");
                test.done();
            });
            h.read();
            h.write("self data")
            setTimeout(function(){
                test.done();
            },300);
        },
        canReadAndWriteObj : function(test){
            var x = {a:1,b:2};
            this.exh.write(x);
            var y = this.exh.readobj();
            test.deepEqual(x,y);
            test.done();
        }
}